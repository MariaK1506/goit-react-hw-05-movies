{"version":3,"file":"static/js/186.be61ed12.chunk.js","mappings":"sLAEaA,E,QAAUC,GAAAA,GAAH,sF,SCKpB,EAJc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OAAO,SAACF,EAAD,UAAUE,M,mGC+DnB,UA5DgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,WAIRE,EAAAA,kBAAsBV,GACnBW,MAAK,SAAAC,GACJR,EAAWQ,EAAKC,SAChBL,EAAU,YAEkB,IAAxBI,EAAKC,QAAQC,SACfR,EAAS,6CACTE,EAAU,gBAGbO,OAAM,SAAAV,GACLC,EAASD,GACTG,EAAU,iBAGf,CAACR,KAGF,gCACc,YAAXO,IAAwB,SAAC,IAAD,IACb,aAAXA,IAAyB,SAAC,IAAD,CAAOR,QAASM,IAC9B,aAAXE,IACC,wBACGJ,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.h2`\n  text-align: center;\n  color: #3f51b5;\n  font-size: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Message } from './Error.styled';\n\nconst Error = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nexport default Error;\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Api from 'services/movies-api';\nimport Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\n// import Reviews from 'components/Reviews/Reviews';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState();\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n    renderMovieReviews();\n\n    function renderMovieReviews() {\n      Api.fetchMovieReviews(movieId)\n        .then(data => {\n          setReviews(data.results);\n          setStatus('resolved');\n\n          if (data.results.length === 0) {\n            setError('We do not have any reviews for this movie');\n            setStatus('rejected');\n          }\n        })\n        .catch(error => {\n          setError(error);\n          setStatus('rejected');\n        });\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && <Error message={error} />}\n      {status === 'resolved' && (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\n// export default ReviewsPage;\n\n// const Reviews = ({ reviews }) => {\n//   return (\n//     <ul>\n//       {reviews.map(({ id, author, content }) => (\n//         <li key={id}>\n//           <p>Author: {author}</p>\n//           <p>{content}</p>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\nexport default Reviews;\n"],"names":["Message","styled","message","movieId","useParams","useState","reviews","setReviews","error","setError","status","setStatus","useEffect","Api","then","data","results","length","catch","map","id","author","content"],"sourceRoot":""}