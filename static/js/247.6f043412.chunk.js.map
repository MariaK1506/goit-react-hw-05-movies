{"version":3,"file":"static/js/247.6f043412.chunk.js","mappings":"sNAgGA,UAzFa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,WAIRE,EAAAA,kBAAsBV,GACnBW,MAAK,SAAAC,GACJR,EAASQ,EAAKC,MACdL,EAAU,YAEe,IAArBI,EAAKC,KAAKC,SACZR,EAAS,kBACTE,EAAU,gBAGbO,OAAM,SAAAV,GACLC,EAASD,GACTG,EAAU,iBAGf,CAACR,KAGF,gCACc,YAAXO,IAAwB,SAAC,IAAD,IACb,aAAXA,IAAyB,SAAC,IAAD,CAAOS,QAASX,IAC9B,aAAXE,IACC,wBACGJ,EAAMc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACT,0BACGF,GACC,gBACEG,IAAG,0CAAqCH,GACxCI,IAAI,UAGN,gBACED,IACE,kEAEFC,IAAI,UAIR,uBAAIH,KACJ,uCAAeC,OAhBRH,a,oECxCRM,E,QAAUC,GAAAA,GAAH,sF,SCKpB,EAJc,SAAC,GAAiB,IAAfT,EAAc,EAAdA,QACf,OAAO,SAACQ,EAAD,UAAUR","sources":["components/Cast/Cast.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Api from 'services/movies-api';\nimport Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\n// import Cast from 'components/Cast/Cast';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n    renderMovieCasts();\n\n    function renderMovieCasts() {\n      Api.fetchMovieCredits(movieId)\n        .then(data => {\n          setCasts(data.cast);\n          setStatus('resolved');\n\n          if (data.cast.length === 0) {\n            setError('No information');\n            setStatus('rejected');\n          }\n        })\n        .catch(error => {\n          setError(error);\n          setStatus('rejected');\n        });\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && <Error message={error} />}\n      {status === 'resolved' && (\n        <ul>\n          {casts.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              {profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt=\"name\"\n                />\n              ) : (\n                <img\n                  src={\n                    'https://image.tmdb.org/t/p/w200/xx6aE6A1RnsDjtDd32CyGecr5tx.jpg'\n                  }\n                  alt=\"name\"\n                />\n              )}\n\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\n// export default CastPage;\n// const Cast = ({ casts }) => {\n//   console.log(casts);\n//   return (\n//     <ul>\n//       {casts.map(({ id, profile_path, name, character }) => (\n//         <li key={id}>\n//           {profile_path ? (\n//             <img\n//               src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n//               alt=\"name\"\n//             />\n//           ) : (\n//             <img\n//               src={\n//                 'https://image.tmdb.org/t/p/w200/xx6aE6A1RnsDjtDd32CyGecr5tx.jpg'\n//               }\n//               alt=\"name\"\n//             />\n//           )}\n\n//           <p>{name}</p>\n//           <p>Character: {character}</p>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Message = styled.h2`\n  text-align: center;\n  color: #3f51b5;\n  font-size: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Message } from './Error.styled';\n\nconst Error = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nexport default Error;\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n"],"names":["movieId","useParams","useState","casts","setCasts","error","setError","status","setStatus","useEffect","Api","then","data","cast","length","catch","message","map","id","profile_path","name","character","src","alt","Message","styled"],"sourceRoot":""}