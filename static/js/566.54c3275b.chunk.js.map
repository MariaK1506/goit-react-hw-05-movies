{"version":3,"file":"static/js/566.54c3275b.chunk.js","mappings":"sLAEaA,E,QAAUC,GAAAA,GAAH,wF,SCCL,SAASC,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QAC9B,OAAO,SAACH,EAAD,UAAUG,M,gKCFNC,EAAOH,EAAAA,GAAAA,GAAH,0CAIJI,EAAOJ,EAAAA,GAAAA,GAAH,4LAOJK,EAAaL,EAAAA,GAAAA,EAAH,wIAUVM,EAAcN,EAAAA,GAAAA,EAAH,4C,SClBT,SAASO,IACtB,MCFa,WACb,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,WAIRE,EAAAA,kBAAsBV,GACnBW,MAAK,SAAAC,GACJR,EAAWQ,EAAKC,SAChBL,EAAU,YAEkB,IAAxBI,EAAKC,QAAQC,SACfR,EAAS,6CACTE,EAAU,gBAGbO,OAAM,SAAAV,GACLC,EAASD,GACTG,EAAU,iBAGf,CAACR,IAEG,CAAEO,OAAAA,EAAQF,MAAAA,EAAOF,QAAAA,GD1BWa,GAA3BT,EAAR,EAAQA,OAAQF,EAAhB,EAAgBA,MAAOF,EAAvB,EAAuBA,QAEvB,OACE,gCACc,YAAXI,IAAwB,SAACU,EAAA,EAAD,IACb,aAAXV,IAAyB,SAACd,EAAA,EAAD,CAAOC,QAASW,IAC9B,aAAXE,IACC,SAACZ,EAAD,UACGQ,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACzB,EAAD,YACE,UAACC,EAAD,sBAAqBuB,MACrB,SAACtB,EAAD,UAAcuB,MAFLF","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","hooks/useFetchMovieReviews.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.h2`\n  text-align: center;\n  color: orangered;\n  font-size: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Message } from './Error.styled';\n\nexport default function Error({ message }) {\n  return <Message>{message}</Message>;\n}\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 10px;\n`;\n\nexport const Item = styled.li`\n  padding: 25px;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%),\n    0px 2px 1px -1px rgb(0 0 0 / 12%);\n`;\n\nexport const AuthorText = styled.p`\n  margin-bottom: 8px;\n  font-size: 18px;\n  font-weight: 500;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const ContentText = styled.p`\n  font-size: 18px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\nimport useFetchMovieReviews from 'hooks/useFetchMovieReviews';\nimport { List, Item, AuthorText, ContentText } from './Reviews.styled';\n\nexport default function Reviews() {\n  const { status, error, reviews } = useFetchMovieReviews();\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && <Error message={error} />}\n      {status === 'resolved' && (\n        <List>\n          {reviews.map(({ id, author, content }) => (\n            <Item key={id}>\n              <AuthorText>Author: {author}</AuthorText>\n              <ContentText>{content}</ContentText>\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Api from 'services/movies-api';\n\nexport default function useFetchMovieReviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState();\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n    renderMovieReviews();\n\n    function renderMovieReviews() {\n      Api.fetchMovieReviews(movieId)\n        .then(data => {\n          setReviews(data.results);\n          setStatus('resolved');\n\n          if (data.results.length === 0) {\n            setError('We do not have any reviews for this movie');\n            setStatus('rejected');\n          }\n        })\n        .catch(error => {\n          setError(error);\n          setStatus('rejected');\n        });\n    }\n  }, [movieId]);\n\n  return { status, error, reviews };\n}\n"],"names":["Message","styled","Error","message","List","Item","AuthorText","ContentText","Reviews","movieId","useParams","useState","reviews","setReviews","error","setError","status","setStatus","useEffect","Api","then","data","results","length","catch","useFetchMovieReviews","Loader","map","id","author","content"],"sourceRoot":""}