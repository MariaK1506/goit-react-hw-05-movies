{"version":3,"file":"static/js/775.32def247.chunk.js","mappings":"oRAEaA,EAAOC,EAAAA,GAAAA,GAAH,oPAWJC,EAAOD,EAAAA,GAAAA,GAAH,kLAMJE,EAAQF,EAAAA,GAAAA,IAAH,gEAKLG,EAAOH,EAAAA,GAAAA,EAAH,wGAOJI,EAAOJ,EAAAA,GAAAA,EAAH,mF,SC1BF,SAASK,IACtB,MCFa,WACb,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,WAIRE,EAAAA,kBAAsBV,GACnBW,MAAK,SAAAC,GACJR,EAASQ,EAAKC,MACdL,EAAU,YAEe,IAArBI,EAAKC,KAAKC,SACZR,EAAS,kBACTE,EAAU,gBAGbO,OAAM,SAAAV,GACLC,EAASD,GACTG,EAAU,iBAGf,CAACR,IAEG,CAAEO,OAAAA,EAAQF,MAAAA,EAAOF,MAAAA,GD1BSa,GAAzBT,EAAR,EAAQA,OAAQF,EAAhB,EAAgBA,MAAOF,EAAvB,EAAuBA,MAEvB,OACE,gCACc,YAAXI,IAAwB,SAACU,EAAA,EAAD,IACb,aAAXV,IAAyB,SAACW,EAAA,EAAD,CAAOC,QAASd,IAC9B,aAAXE,IACC,SAACd,EAAD,UACGU,EAAMiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACT,UAAC7B,EAAD,WACG2B,GACC,SAAC1B,EAAD,CACE6B,IAAG,0CAAqCH,GACxCI,IAAI,UAGN,SAAC9B,EAAD,CACE6B,IACE,kEAEFC,IAAI,UAIR,SAAC7B,EAAD,UAAO0B,KACP,UAACzB,EAAD,yBAAkB0B,OAhBTH,a,oEEbVM,E,QAAUjC,GAAAA,GAAH,wF,SCCL,SAASwB,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QAC9B,OAAO,SAACQ,EAAD,UAAUR","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","hooks/useFetchMovieCredits.js","components/Error/Error.styled.jsx","components/Error/Error.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  height: 300px;\n  object-fit: cover;\n`;\n\nexport const Name = styled.p`\n  padding: 5px 10px;\n  font-size: 18px;\n  font-weight: 500;\n  color: black;\n`;\n\nexport const Text = styled.p`\n  padding: 5px 10px;\n  font-size: 16px;\n  color: black;\n`;\n","import Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\nimport useFetchMovieCredits from 'hooks/useFetchMovieCredits';\nimport { List, Item, Image, Name, Text } from './Cast.styled';\n\nexport default function Cast() {\n  const { status, error, casts } = useFetchMovieCredits();\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && <Error message={error} />}\n      {status === 'resolved' && (\n        <List>\n          {casts.map(({ id, profile_path, name, character }) => (\n            <Item key={id}>\n              {profile_path ? (\n                <Image\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt=\"name\"\n                />\n              ) : (\n                <Image\n                  src={\n                    'https://image.tmdb.org/t/p/w200/xx6aE6A1RnsDjtDd32CyGecr5tx.jpg'\n                  }\n                  alt=\"name\"\n                />\n              )}\n\n              <Name>{name}</Name>\n              <Text>Character: {character}</Text>\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Api from 'services/movies-api';\n\nexport default function useFetchMovieCredits() {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n    renderMovieCasts();\n\n    function renderMovieCasts() {\n      Api.fetchMovieCredits(movieId)\n        .then(data => {\n          setCasts(data.cast);\n          setStatus('resolved');\n\n          if (data.cast.length === 0) {\n            setError('No information');\n            setStatus('rejected');\n          }\n        })\n        .catch(error => {\n          setError(error);\n          setStatus('rejected');\n        });\n    }\n  }, [movieId]);\n\n  return { status, error, casts };\n}\n","import styled from 'styled-components';\n\nexport const Message = styled.h2`\n  text-align: center;\n  color: orangered;\n  font-size: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Message } from './Error.styled';\n\nexport default function Error({ message }) {\n  return <Message>{message}</Message>;\n}\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n"],"names":["List","styled","Item","Image","Name","Text","Cast","movieId","useParams","useState","casts","setCasts","error","setError","status","setStatus","useEffect","Api","then","data","cast","length","catch","useFetchMovieCredits","Loader","Error","message","map","id","profile_path","name","character","src","alt","Message"],"sourceRoot":""}